APP := $(shell basename -s .git $(shell git remote get-url origin))
REGISTRY ?= ghcr.io/yuandrk
VERSION := $(shell git describe --tags --always --dirty)-$(shell git rev-parse --short HEAD)
ARCH ?= amd64

VENV := venv
PYTHON := $(VENV)/bin/python
PIP := $(VENV)/bin/pip
.DEFAULT_GOAL := run

# Added a target for installing system dependencies
setup-system:
	@sudo apt-get update && sudo apt-get install -y python3-venv python3-pip

# Ensures the virtual environment is only created if it doesn't exist or requirements.txt is updated
$(VENV)/.venv_stamp: requirements.txt
	@python3 -m venv $(VENV)
	@. $(VENV)/bin/activate && $(PIP) install -r requirements.txt
	@touch $(VENV)/.venv_stamp

# The .PHONY directive tells Make that 'venv' isn't a file to check for updates
.PHONY: venv
venv:
	@python3 -m venv $(VENV)
	@$(VENV)/bin/pip install -r requirements.txt

# The 'run' target depends on 'venv', ensuring the virtual environment is ready
run: venv
	@. $(VENV)/bin/activate && $(PYTHON) main.py

# Builds the Docker image with the given architecture
image:
	@docker build . --build-arg ARCH=$(ARCH) -t $(REGISTRY)/$(APP):$(VERSION)-$(ARCH)

# Pushes the Docker image to the registry
push:
	@docker push $(REGISTRY)/$(APP):$(VERSION)-$(ARCH)

# Cleans up the project by removing the virtual environment and Python bytecode
clean:
	@echo "Cleaning up..."
	@rm -rf __pycache__
	@rm -rf $(VENV)

# Helper target to display available commands
.PHONY: help
help:
	@echo "Available commands:"
	@echo "  setup-system   Install system dependencies"
	@echo "  run            Run the main Python application"
	@echo "  image          Build Docker image for the current architecture"
	@echo "  push           Push Docker image to the registry"
	@echo "  clean          Clean up the project directory"
	@echo "  test           Run unit tests"
